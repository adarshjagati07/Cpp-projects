#ifndef __$__UOMMANAGER__bl
#define __$__UOMMANAGER__bl
#include <iostream>
#include <bl/iuom>
#include <bl/uom>
#include <bl/iuommanager>
using namespace std;
namespace inventory
{
    namespace business_layer
    {
        class UnitOfMeasurementTitleComparator
        {
        public:
            bool operator()(string *left, string *right);
        };
        class UnitOfMeasurementManager : public abc::IUnitOfMeasurementManager
        {
            class _UnitOfMeasurement
            {
            public:
                int code;
                string *title;
            };

        private:
            class DataModel
            {
            public:
                map<int, _UnitOfMeasurement *> codeWiseMap;
                map<string *, _UnitOfMeasurement *> titleWiseMap;
                DataModel();
                ~DataModel();
                void populateDataStructure();
            };
            static DataModel dataModel;

        public:
            UnitOfMeasurementManager();
            void addUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
            void updateUnitOfMeasurement(abc::IUnitOfMeasurement *unitOfMeasurement);
            void removeUnitOfMeasurementByCode(int code);
            void removeUnitOfMeasurementByTitle(string &title);
            abc::IUnitOfMeasurement *getUnitOfMeasurementByCode(int code);
            abc::IUnitOfMeasurement *getUnitOfMeasurementByTitle(string &title);
            forward_list<abc::IUnitOfMeasurement *> *getUnitOfMeasurements();
            int unitOfMeasurementCodeExists(int code);
            string unitOfMeasurementTitleExists(string &title);
            int getUnitOfMeasurementCount();
        };
    }
}
#endif